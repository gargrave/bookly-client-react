// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InputField "email" type input field renders an email input correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="input-field"
>
    <label
        htmlFor="email"
    >
        Email
        :
    </label>
    <input
        id="email"
        name="email"
        onChange={[Function]}
        type="email"
        value=""
    />
</div>,
  "nodes": Array [
    <div
      className="input-field"
>
      <label
            htmlFor="email"
      >
            Email
            :
      </label>
      <input
            id="email"
            name="email"
            onChange={[Function]}
            type="email"
            value=""
      />
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <InputField
        boundValue=""
        label="Email"
        name="email"
        onInputChange={[Function]}
        type="email"
/>,
      "_debugID": 5,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "boundValue": "",
          "label": "Email",
          "name": "email",
          "onInputChange": [Function],
          "type": "email",
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 3,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="input-field"
>
          <label
                    htmlFor="email"
          >
                    Email
                    :
          </label>
          <input
                    id="email"
                    name="email"
                    onChange={[Function]}
                    type="email"
                    value=""
          />
</div>,
        "_debugID": 6,
        "_renderedOutput": <div
          className="input-field"
>
          <label
                    htmlFor="email"
          >
                    Email
                    :
          </label>
          <input
                    id="email"
                    name="email"
                    onChange={[Function]}
                    type="email"
                    value=""
          />
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <InputField
    boundValue=""
    label="Email"
    name="email"
    onInputChange={[Function]}
    type="email"
/>,
}
`;

exports[`InputField "password" type input field renders a password input correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="input-field"
>
    <label
        htmlFor="password"
    >
        Password
        :
    </label>
    <input
        id="password"
        name="password"
        onChange={[Function]}
        type="password"
        value=""
    />
</div>,
  "nodes": Array [
    <div
      className="input-field"
>
      <label
            htmlFor="password"
      >
            Password
            :
      </label>
      <input
            id="password"
            name="password"
            onChange={[Function]}
            type="password"
            value=""
      />
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <InputField
        boundValue=""
        label="Password"
        name="password"
        onInputChange={[Function]}
        type="password"
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "boundValue": "",
          "label": "Password",
          "name": "password",
          "onInputChange": [Function],
          "type": "password",
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="input-field"
>
          <label
                    htmlFor="password"
          >
                    Password
                    :
          </label>
          <input
                    id="password"
                    name="password"
                    onChange={[Function]}
                    type="password"
                    value=""
          />
</div>,
        "_debugID": 4,
        "_renderedOutput": <div
          className="input-field"
>
          <label
                    htmlFor="password"
          >
                    Password
                    :
          </label>
          <input
                    id="password"
                    name="password"
                    onChange={[Function]}
                    type="password"
                    value=""
          />
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <InputField
    boundValue=""
    label="Password"
    name="password"
    onInputChange={[Function]}
    type="password"
/>,
}
`;

exports[`InputField "text" type input field renders a text input correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="input-field"
>
    <label
        htmlFor="text"
    >
        Whatever
        :
    </label>
    <input
        id="text"
        name="text"
        onChange={[Function]}
        type="text"
        value=""
    />
</div>,
  "nodes": Array [
    <div
      className="input-field"
>
      <label
            htmlFor="text"
      >
            Whatever
            :
      </label>
      <input
            id="text"
            name="text"
            onChange={[Function]}
            type="text"
            value=""
      />
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <InputField
        boundValue=""
        label="Whatever"
        name="text"
        onInputChange={[Function]}
        type="text"
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "boundValue": "",
          "label": "Whatever",
          "name": "text",
          "onInputChange": [Function],
          "type": "text",
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="input-field"
>
          <label
                    htmlFor="text"
          >
                    Whatever
                    :
          </label>
          <input
                    id="text"
                    name="text"
                    onChange={[Function]}
                    type="text"
                    value=""
          />
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="input-field"
>
          <label
                    htmlFor="text"
          >
                    Whatever
                    :
          </label>
          <input
                    id="text"
                    name="text"
                    onChange={[Function]}
                    type="text"
                    value=""
          />
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <InputField
    boundValue=""
    label="Whatever"
    name="text"
    onInputChange={[Function]}
    type="text"
/>,
}
`;
